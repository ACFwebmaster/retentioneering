# =============================================================================
# Docker Compose Configuration for Non-Profit Engagement Model
# =============================================================================
# This docker-compose file provides production-ready services with proper
# networking, volumes, and security configurations.
#
# Usage:
#   Production: docker-compose up -d
#   Development: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# =============================================================================

version: '3.8'

# =============================================================================
# Services Configuration
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # Main Application Service
  # ---------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-}
    image: nonprofit-engagement-model:${VERSION:-latest}
    container_name: nonprofit-engagement-app
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - CONTAINER_NAME=nonprofit-engagement-app
    
    # Port mapping
    ports:
      - "${APP_PORT:-8000}:8000"
    
    # Volume mounts for persistent data
    volumes:
      - app_data:/app/data
      - app_models:/app/models
      - app_logs:/app/logs
      - app_outputs:/app/outputs
      - app_backups:/app/backups
      # Mount configuration files (read-only)
      - ./security:/app/security:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.config.database import test_database_connection; exit(0 if test_database_connection() else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nonprofit-engagement-app"
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Networks
    networks:
      - app_network
      - monitoring_network

  # ---------------------------------------------------------------------------
  # Redis Cache Service
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: nonprofit-engagement-redis
    restart: unless-stopped
    
    # Redis configuration
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-secure_redis_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    # Port mapping (internal only)
    expose:
      - "6379"
    
    # Volume for Redis persistence
    volumes:
      - redis_data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    
    # Networks
    networks:
      - app_network

  # ---------------------------------------------------------------------------
  # Nginx Reverse Proxy (Production)
  # ---------------------------------------------------------------------------
  nginx:
    image: nginx:1.25-alpine
    container_name: nonprofit-engagement-nginx
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    # Configuration and SSL certificates
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Dependencies
    depends_on:
      app:
        condition: service_healthy
    
    # Networks
    networks:
      - app_network
      - monitoring_network

  # ---------------------------------------------------------------------------
  # Monitoring Services
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: nonprofit-engagement-prometheus
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Port mapping (internal)
    expose:
      - "9090"
    
    # Command with configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Networks
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana:latest
    container_name: nonprofit-engagement-grafana
    restart: unless-stopped
    
    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    # Port mapping
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Dependencies
    depends_on:
      prometheus:
        condition: service_healthy
    
    # Networks
    networks:
      - monitoring_network

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  app_network:
    driver: bridge
    name: nonprofit_engagement_network
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  monitoring_network:
    driver: bridge
    name: nonprofit_monitoring_network
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  # Application data volumes
  app_data:
    driver: local
    name: nonprofit_engagement_data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  
  app_models:
    driver: local
    name: nonprofit_engagement_models
    driver_opts:
      type: none
      o: bind
      device: ${MODELS_PATH:-./models}
  
  app_logs:
    driver: local
    name: nonprofit_engagement_logs
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  
  app_outputs:
    driver: local
    name: nonprofit_engagement_outputs
    driver_opts:
      type: none
      o: bind
      device: ${OUTPUTS_PATH:-./outputs}
  
  app_backups:
    driver: local
    name: nonprofit_engagement_backups
    driver_opts:
      type: none
      o: bind
      device: ${BACKUPS_PATH:-./backups}
  
  # Service data volumes
  redis_data:
    driver: local
    name: nonprofit_redis_data
  
  prometheus_data:
    driver: local
    name: nonprofit_prometheus_data
  
  grafana_data:
    driver: local
    name: nonprofit_grafana_data
  
  nginx_logs:
    driver: local
    name: nonprofit_nginx_logs

# =============================================================================
# Configuration Notes
# =============================================================================
# 1. Environment Variables:
#    - Copy .env.production to .env and configure your settings
#    - Set BUILD_DATE, VERSION, VCS_REF for proper image labeling
#
# 2. SSL Configuration:
#    - Place SSL certificates in ./ssl/ directory
#    - Configure nginx.conf for HTTPS
#
# 3. Monitoring:
#    - Prometheus metrics available at http://localhost:9090
#    - Grafana dashboards at http://localhost:3000
#
# 4. Security:
#    - All services run as non-root users
#    - Network isolation between app and monitoring
#    - Resource limits enforced
#    - Health checks enabled
#
# 5. Scaling:
#    - Use docker-compose up --scale app=3 for horizontal scaling
#    - Configure load balancing in nginx
# =============================================================================